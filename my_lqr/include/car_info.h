// Generated by gencpp from file my_mpc/car_info.msg
// DO NOT EDIT!


#ifndef MY_MPC_MESSAGE_CAR_INFO_H
#define MY_MPC_MESSAGE_CAR_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_mpc
{
template <class ContainerAllocator>
struct car_info_
{
  typedef car_info_<ContainerAllocator> Type;

  car_info_()
    : car_x(0.0)
    , car_y(0.0)
    , car_yaw(0.0)
    , car_v(0.0)  {
    }
  car_info_(const ContainerAllocator& _alloc)
    : car_x(0.0)
    , car_y(0.0)
    , car_yaw(0.0)
    , car_v(0.0)  {
  (void)_alloc;
    }



   typedef float _car_x_type;
  _car_x_type car_x;

   typedef float _car_y_type;
  _car_y_type car_y;

   typedef float _car_yaw_type;
  _car_yaw_type car_yaw;

   typedef float _car_v_type;
  _car_v_type car_v;





  typedef boost::shared_ptr< ::my_mpc::car_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_mpc::car_info_<ContainerAllocator> const> ConstPtr;

}; // struct car_info_

typedef ::my_mpc::car_info_<std::allocator<void> > car_info;

typedef boost::shared_ptr< ::my_mpc::car_info > car_infoPtr;
typedef boost::shared_ptr< ::my_mpc::car_info const> car_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_mpc::car_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_mpc::car_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_mpc::car_info_<ContainerAllocator1> & lhs, const ::my_mpc::car_info_<ContainerAllocator2> & rhs)
{
  return lhs.car_x == rhs.car_x &&
    lhs.car_y == rhs.car_y &&
    lhs.car_yaw == rhs.car_yaw &&
    lhs.car_v == rhs.car_v;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_mpc::car_info_<ContainerAllocator1> & lhs, const ::my_mpc::car_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_mpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_mpc::car_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_mpc::car_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_mpc::car_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_mpc::car_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_mpc::car_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_mpc::car_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_mpc::car_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62cd59b388cc9761d1f5a4719036b6cd";
  }

  static const char* value(const ::my_mpc::car_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62cd59b388cc9761ULL;
  static const uint64_t static_value2 = 0xd1f5a4719036b6cdULL;
};

template<class ContainerAllocator>
struct DataType< ::my_mpc::car_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_mpc/car_info";
  }

  static const char* value(const ::my_mpc::car_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_mpc::car_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 car_x\n"
"float32 car_y\n"
"float32 car_yaw\n"
"float32 car_v\n"
;
  }

  static const char* value(const ::my_mpc::car_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_mpc::car_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.car_x);
      stream.next(m.car_y);
      stream.next(m.car_yaw);
      stream.next(m.car_v);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct car_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_mpc::car_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_mpc::car_info_<ContainerAllocator>& v)
  {
    s << indent << "car_x: ";
    Printer<float>::stream(s, indent + "  ", v.car_x);
    s << indent << "car_y: ";
    Printer<float>::stream(s, indent + "  ", v.car_y);
    s << indent << "car_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.car_yaw);
    s << indent << "car_v: ";
    Printer<float>::stream(s, indent + "  ", v.car_v);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MPC_MESSAGE_CAR_INFO_H
